from aiogram import Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.admin import get_admin_id
from utils.user_utils import get_user_name, get_coffeemaker_emoji, get_feedback_emoji
from db.users import get_user, get_user_by_username, set_user_as_coffeemaker, get_users
from keyboards.main_menu import get_main_menu
from aiogram.filters import Command
from utils.code_generator import generate_code
from db.feedback import get_feedback, update_feedback_code, check_if_code_unique, confirm_code_usage, update_or_create_feedback

router = Router()

class CoffeemakerState(StatesGroup):
  entering_code = State()

@router.message(F.text.lower() == "–≤–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def enter_code(message: Message, state: FSMContext):
  user = get_user(message.from_user.id)
  if user is not None and user.is_coffeemaker == 1:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ ‚¨á")
    await state.set_state(CoffeemakerState.entering_code)
  elif user is not None and user.is_coffeemaker == 0:
    await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥",reply_markup=get_main_menu(user.id))

@router.message(CoffeemakerState.entering_code)
async def check_code(message: Message, state: FSMContext, bot: Bot):
  confirm, user_id = confirm_code_usage(message.text)
  if confirm:
    await message.answer("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
    user = get_user(user_id)
    await bot.send_message(get_admin_id(), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–µ–¥—ä—è–≤–∏–ª –∫–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞")
    await bot.send_message(user_id, "–ö–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ë–∞—Ä–∏—Å—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!ü•≥‚òï", reply_markup=get_main_menu(user_id))
  else:
    await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! ‚ùå", reply_markup=get_main_menu(message.from_user.id))
  await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve
@router.message(Command('approve'))
async def approve_feedback(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    feedback = get_feedback(user.id)
    if feedback:
      code = generate_code()
      while not check_if_code_unique(code):
        code = generate_code()
      update_feedback_code(user.id, code)
      await bot.send_message(admin_id, f"–ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}: {code}")
      await bot.send_message(user.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é! üéâ\n–í–∞—à –∫–æ–¥: {code}.\n–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –±–∞—Ä–∏—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!", reply_markup=get_main_menu(user.id))
    else:
      await bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(Command('addNewCoffeemaker'))
async def add_new_coffeemaker(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      if user.is_coffeemaker == 0:
        set_user_as_coffeemaker(user.id, 1)
        await bot.send_message(admin_id, "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –±–∞—Ä–∏—Å—Ç–∞!")
        await bot.send_message(user.id, "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –±–∞—Ä–∏—Å—Ç–∞!",
                               reply_markup=get_main_menu(user.id))
      else:
        await bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–∞—Ä–∏—Å—Ç–∞!")
    else:
      await bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@router.message(Command('removeCoffeemaker'))
async def remove_coffeemaker(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      if user.is_coffeemaker == 1:
        set_user_as_coffeemaker(user.id, 0)
        await bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –±–æ–ª—å—à–µ –Ω–µ –±–∞—Ä–∏—Å—Ç–∞!")
      else:
        await bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–∞—Ä–∏—Å—Ç–∞!")
    else:
      await bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@router.message(Command('allUsers'))
async def get_all_users(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    users = get_users()
    answer = ""
    number = 1
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –±–∞—Ä–∏—Å—Ç–∞, –∞ –∑–∞—Ç–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    sorted_users = sorted(users, key=lambda user: (-user.is_coffeemaker, user.id))
    for user in sorted_users:
      feedback = get_feedback(user.id)
      answer += f"{number}. {get_coffeemaker_emoji(user)} {get_user_name(user)} {get_feedback_emoji(feedback)}\n"
      number += 1
    await bot.send_message(admin_id, f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{answer}")

@router.message(Command('addLink'))
async def add_link(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      link = message.text.split()[2]
      is_update, feedback = update_or_create_feedback(user.id, link)
      if feedback is not None:
        await bot.send_message(admin_id, "–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–ª–µ–Ω–∞!")