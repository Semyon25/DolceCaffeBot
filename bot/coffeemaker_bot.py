from aiogram import Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.admin import get_admin_id
from db.users import get_user, get_user_by_username, set_user_as_coffeemaker, get_users
from keyboards.main_menu import get_main_menu
from aiogram.filters import Command
from utils.code_generator import generate_code
from db.feedback import get_feedback, update_feedback_code, check_if_code_unique, confirm_code_usage

router = Router()

class CoffeemakerState(StatesGroup):
  entering_code = State()

@router.message(F.text.lower() == "–≤–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def enter_code(message: Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ ‚¨á")
  await state.set_state(CoffeemakerState.entering_code)

@router.message(CoffeemakerState.entering_code)
async def check_code(message: Message, state: FSMContext, bot: Bot):
  confirm, user_id = confirm_code_usage(message.text)
  if confirm:
    await message.answer("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
    user = get_user(user_id)
    await bot.send_message(get_admin_id(), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–µ–¥—ä—è–≤–∏–ª –∫–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞")
    await bot.send_message(user_id, "–ö–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ë–∞—Ä–∏—Å—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!ü•≥‚òï", reply_markup=get_main_menu(user_id))
  else:
    await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! ‚ùå", reply_markup=get_main_menu(message.from_user.id))
  await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve
@router.message(Command('approve'))
async def approve_feedback(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    username = message.text.split()[1]
    if username.startswith("@"):
      username = username[1:]
    user = get_user_by_username(username)
    feedback = get_feedback(user.id)
    if feedback:
      code = generate_code()
      while not check_if_code_unique(code):
        code = generate_code()
      update_feedback_code(user.id, code)
      await bot.send_message(admin_id, f"–ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}: {code}")
      await bot.send_message(user.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é! üéâ\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥' –∏ —Å–æ–æ–±—â–∏—Ç–µ –∫–æ–¥ –±–∞—Ä–∏—Å—Ç–∞ üî¢", reply_markup=get_main_menu(user.id))
    else:
      await bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(Command('addNewCoffeemaker'))
async def add_new_coffeemaker(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    username = message.text.split()[1]    
    if username.startswith("@"):
      username = username[1:]
    user = get_user_by_username(username)
    if user is not None:
      if user.is_coffeemaker == 0:
        set_user_as_coffeemaker(user.id)
        await bot.send_message(admin_id, "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –±–∞—Ä–∏—Å—Ç–∞!")
      else:
        await bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–∞—Ä–∏—Å—Ç–∞!")
    else:
      await bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

@router.message(Command('allUsers'))
async def get_all_users(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    users = get_users()
    answer = ""
    for user in users:
      answer += f"@{user.username}|{user.tg_name}|{user.tg_surname}|{user.created_date}|{user.is_coffeemaker}\n"
    await bot.send_message(admin_id, f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{answer}")