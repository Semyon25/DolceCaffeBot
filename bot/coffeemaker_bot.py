import asyncio
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from utils.admin import get_admin_id, is_coffeemaker_or_admin
from utils.user_utils import get_user_name, get_coffeemaker_emoji, get_feedback_emoji, get_beverage_count_emoji
from db.users import get_user, set_user_as_coffeemaker, get_users
from keyboards.main_menu import get_main_menu
from utils.code_generator import generate_code_6, generate_purchase_code_if_needed
from utils.declension_noun import beverage_declension
from db.feedback import get_feedback, update_feedback_code, check_if_code_unique as check_if_code_unique_from_feedback, confirm_code_usage as confirm_code_usage_from_feedback, update_or_create_feedback
from db.codes import get_user as get_user_by_code, confirm_code_usage, check_if_code_unique, set_code
from db.purchases import get_count, set_count

router = Router()


class CoffeemakerState(StatesGroup):
  entering_code = State()
  waiting_beverage_count = State()


@router.message(F.text.lower() == "–≤–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def enter_code(message: Message, state: FSMContext):
  if is_coffeemaker_or_admin(message.from_user.id):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ ‚¨á")
    await state.set_state(CoffeemakerState.entering_code)
  else:
    await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥",
                         reply_markup=get_main_menu(message.from_user.id))


@router.message(CoffeemakerState.entering_code)
async def check_code(message: Message, state: FSMContext, bot: Bot):
  await state.clear()
  entered_code = message.text or ''
  # –ê–∫—Ü–∏—è 6+1
  if entered_code.isdigit() and len(entered_code) == 4:
    await handle_purchase_6_1(message, state, bot)
  # –ù–∞–ø–∏—Ç–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤
  elif entered_code.isdigit() and (len(entered_code) == 6):
    await handle_feedback(message, bot)
  # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –∫–æ–¥–æ–º
  elif entered_code.isdigit() and (len(entered_code) == 8):
    await handle_certificate(message, bot)
  else:
    await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! ‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ –∞–∫—Ü–∏–∏ 6+1
async def handle_purchase_6_1(message: Message, state: FSMContext, bot: Bot):
  entered_code = message.text or ''
  userId = get_user_by_code(entered_code)
  if userId is None:
    await message.answer(
        "‚ùå –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–ª–∏–µ–Ω—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ (–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ê–∫—Ü–∏—è 6+1')"
    )
  else:
    count = get_count(userId)
    confirm_code_usage(entered_code)
    if count is not None and count >= 6:
      set_count(userId, 0)
      await message.answer(
          "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
      client = get_user(userId)
      await bot.send_message(
          get_admin_id(),
          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_name(client)} –ø—Ä–µ–¥—ä—è–≤–∏–ª –∫–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –ø–æ –∞–∫—Ü–∏–∏ 6+1"
      )
      await bot.send_message(userId,
                             "–ë–∞—Ä–∏—Å—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!ü•≥‚òï")
    elif count is not None and count < 6:
      await state.update_data(user_id=userId, count=count)
      keyboard = InlineKeyboardMarkup(inline_keyboard=[[
          InlineKeyboardButton(text="1", callback_data="beverage_1"),
          InlineKeyboardButton(text="2", callback_data="beverage_2"),
          InlineKeyboardButton(text="3", callback_data="beverage_3")
      ]])
      await message.answer(
          "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—Ç–∫–æ–≤ –∫—É–ø–∏–ª –∫–ª–∏–µ–Ω—Ç",
          reply_markup=keyboard)
      await state.set_state(CoffeemakerState.waiting_beverage_count)


@router.callback_query(CoffeemakerState.waiting_beverage_count)
async def handle_beverage_count(query: CallbackQuery, state: FSMContext,
                                bot: Bot):
  delta = int(0)
  if query.data == "beverage_1":
    delta = 1
  elif query.data == "beverage_2":
    delta = 2
  elif query.data == "beverage_3":
    delta = 3
  data = await state.get_data()
  userId = data.get('user_id')
  count = min(6, data.get('count') + delta)
  set_count(userId, count)
  user = get_user(userId)
  await bot.send_message(
      get_admin_id(),
      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_name(user)} –∫—É–ø–∏–ª {delta} {beverage_declension(delta)} –ø–æ –∞–∫—Ü–∏–∏ 6+1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Ç–∫–æ–≤: {count}"
  )
  await bot.send_message(
      userId,
      f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—á—Ç–µ–Ω–∞! –í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ <b>{count}</b> {beverage_declension(count)} –∏–∑ 6.‚òï",
      parse_mode=ParseMode.HTML)
  if count >= 6:
    code = generate_purchase_code_if_needed(userId)
    await bot.send_message(
        userId,
        f'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> üéâ\n–í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ —à–µ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–æ–≤! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫</b>!‚òï\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫, —Å–æ–æ–±—â–∏—Ç–µ –±–∞—Ä–∏—Å—Ç–∞ –∫–æ–¥ <b>{code}</b>',
        parse_mode=ParseMode.HTML)
  await query.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É—á—Ç–µ–Ω–∞!")
  await bot.delete_message(chat_id=query.message.chat.id,
                           message_id=query.message.message_id)
  await query.answer()
  await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ –Ω–∞–ø–∏—Ç–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤
async def handle_feedback(message: Message, bot: Bot):
  entered_code = message.text or ''
  confirm, user_id = confirm_code_usage_from_feedback(entered_code)
  if confirm:
    await message.answer(
        "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
    user = get_user(user_id)
    await bot.send_message(
        get_admin_id(),
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–µ–¥—ä—è–≤–∏–ª –∫–æ–¥ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞")
    await bot.send_message(
        user_id,
        "–ö–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ë–∞—Ä–∏—Å—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!ü•≥‚òï",
        reply_markup=get_main_menu(user_id))
  else:
    await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! ‚ùå",
                         reply_markup=get_main_menu(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
async def handle_certificate(message: Message, bot: Bot):
  entered_code = message.text or ''
  user_id = get_user_by_code(entered_code)
  if user_id == get_admin_id():
    confirm_code_usage(entered_code)
    await message.answer("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! ‚úÖ\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
    await bot.send_message(user_id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ–¥ {entered_code} –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
  else:
    await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! ‚ùå",
                         reply_markup=get_main_menu(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve
@router.message(Command('approve'))
async def approve_feedback(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    feedback = get_feedback(user.id)
    if feedback:
      code = generate_code_6()
      while not check_if_code_unique_from_feedback(code):
        code = generate_code_6()
      update_feedback_code(user.id, code)
      await bot.send_message(admin_id,
                             f"–ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}: {code}")
      await bot.send_message(
          user.id,
          f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é! üéâ\n–í–∞—à –∫–æ–¥: {code}.\n–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –±–∞—Ä–∏—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!",
          reply_markup=get_main_menu(user.id))
    else:
      await bot.send_message(admin_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(Command('addNewCoffeemaker'))
async def add_new_coffeemaker(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      if user.is_coffeemaker == 0:
        set_user_as_coffeemaker(user.id, 1)
        await bot.send_message(admin_id, "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –±–∞—Ä–∏—Å—Ç–∞!")
        await bot.send_message(user.id,
                               "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –±–∞—Ä–∏—Å—Ç–∞!",
                               reply_markup=get_main_menu(user.id))
      else:
        await bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–∞—Ä–∏—Å—Ç–∞!")
    else:
      await bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


@router.message(Command('removeCoffeemaker'))
async def remove_coffeemaker(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      if user.is_coffeemaker == 1:
        set_user_as_coffeemaker(user.id, 0)
        await bot.send_message(
            admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –±–æ–ª—å—à–µ –Ω–µ –±–∞—Ä–∏—Å—Ç–∞!")
      else:
        await bot.send_message(admin_id, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–∞—Ä–∏—Å—Ç–∞!")
    else:
      await bot.send_message(admin_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


@router.message(Command('allUsers'))
async def get_all_users(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    users = get_users()
    answer = f"#allUsers\n–í—Å–µ–≥–æ –≤ –±–æ—Ç–µ {users.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    number = 1
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –±–∞—Ä–∏—Å—Ç–∞, –∞ –∑–∞—Ç–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    sorted_users = sorted(users, key=lambda user: -user.is_coffeemaker)
    for user in sorted_users:
      feedback = get_feedback(user.id)
      beverage_count = get_count(user.id)
      answer += f"{number}. {get_coffeemaker_emoji(user)} {get_user_name(user)} ({int(user.id)}){get_feedback_emoji(feedback)} {get_beverage_count_emoji(beverage_count)}\n"
      if number % 90 == 0:
        await bot.send_message(admin_id, answer)
        await asyncio.sleep(1)
        answer = ""
      number += 1
    if answer != "":
      await bot.send_message(admin_id, answer)


@router.message(Command('addLink'))
async def add_link(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      link = message.text.split()[2]
      is_update, feedback = update_or_create_feedback(user.id, link)
      if feedback is not None:
        await bot.send_message(admin_id, "–°—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@router.message(Command('correctPurchaseCount'))
async def correct_purchase_count(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    userId = message.text.split()[1]
    user = get_user(userId)
    if user is not None:
      count = message.text.split()[2]
      set_count(userId, count)
      updated_count = get_count(userId)
      await bot.send_message(
          admin_id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–æ {updated_count} –Ω–∞–ø–∏—Ç–∫–æ–≤")


@router.message(Command('addNewCode'))
async def add_new_code(message: Message, bot: Bot):
  admin_id = int(get_admin_id())
  if message.from_user.id == admin_id:
    code = message.text.split()[1]
    if len(code) != 8:
      await bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥!")
      return
    if check_if_code_unique(code):
      set_code(admin_id, code)  # –∑–∞–ø–∏—Å—ã–≤–∞—é –∫–æ–¥ –Ω–∞ —Å–µ–±—è
      await bot.send_message(admin_id, "–ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    else:
      await bot.send_message(admin_id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π!")
