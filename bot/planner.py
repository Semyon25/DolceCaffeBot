import asyncio
from aiogram import Bot
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from db.users import get_users, get_user
from utils.date_utils import get_next_week_range
from keyboards.shifts_keyboard import get_shifts_keyboard
from utils.user_utils import get_user_name
from utils.shifts import order_and_format_shifts
from utils.send_message import notify_admin_and_managers

router = Router()

# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram)
DELAY_BETWEEN_MESSAGES = 1


async def plan_next_week(bot: Bot):
  users = get_users()
  start, end = get_next_week_range()
  for user in users:
    if user.is_coffeemaker == 1:
      await bot.send_message(user.id, f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\nüìÖ –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.\n‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ —Å <b>{start}</b> –ø–æ <b>{end}</b>", parse_mode=ParseMode.HTML, reply_markup=get_shifts_keyboard())
      await asyncio.sleep(DELAY_BETWEEN_MESSAGES)

@router.callback_query(F.data.startswith("shift_"))
async def handle_shift_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data

    user_data = await state.get_data()
    shifts = user_data.get("shifts", [])

    if data == "shift_none":
      if shifts:
        shifts = []
        await state.update_data(shifts=shifts)
        await callback.message.edit_reply_markup(reply_markup=get_shifts_keyboard(shifts))
      await callback.message.answer("–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç —Å–º–µ–Ω üò¢")
      await callback.answer()
      coffeemaker = get_user(callback.from_user.id)
      start, end = get_next_week_range("")
      await notify_admin_and_managers(bot, f"#planner #week_{start}_{end}\n–ë–∞—Ä–∏—Å—Ç–∞ {get_user_name(coffeemaker)} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–º–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ")
      return

    if data == "shift_submit":
        if not shifts:
            await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ–Ω—ã ‚ùå", show_alert=True)
            return
        await callback.message.answer("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!")
        await callback.answer()
        coffeemaker = get_user(callback.from_user.id)
        start, end = get_next_week_range("")
        await notify_admin_and_managers(bot, f"#planner #week_{start}_{end}\n–ë–∞—Ä–∏—Å—Ç–∞ {get_user_name(coffeemaker)} –≤—ã–±—Ä–∞–ª —Å–º–µ–Ω—ã:\n" + "\n".join(f"- {s}" for s in order_and_format_shifts(shifts)))
        await state.update_data(shifts=[])
        return

    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–º–µ–Ω–∞
    if data in shifts:
        shifts.remove(data)
    else:
        shifts.append(data)

    await state.update_data(shifts=shifts)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    await callback.message.edit_reply_markup(reply_markup=get_shifts_keyboard(shifts))